import React from 'react';
import ReactDOM from 'react-dom';
import { FEAASBase } from '../components/FEAASBase.js';
import { kebabCase, reverseKebabCase } from '../utils/string.js';
import { Component } from './react.js';
const convertSchemaPropertiesToKebabCase = (schema) => {
    if (!schema)
        return;
    let kebabSchemaProperties, kebabRequiredProperties;
    if (schema.properties) {
        kebabSchemaProperties = Object.keys(schema.properties).reduce((acc, key) => {
            acc[kebabCase(key)] = schema.properties[key];
            return acc;
        }, {});
        kebabRequiredProperties = (schema.required || []).map((item) => kebabCase(item));
    }
    return { ...schema, properties: kebabSchemaProperties, required: kebabRequiredProperties };
};
export const parseProps = (propName, propValue, properties) => {
    var _a;
    switch ((_a = properties === null || properties === void 0 ? void 0 : properties[propName]) === null || _a === void 0 ? void 0 : _a.type) {
        case 'string':
            return propValue;
        case 'object':
            return JSON.parse(propValue);
        case 'array':
            return JSON.parse(propValue);
        case 'number':
            return +propValue;
        case 'integer':
            return +propValue;
        case 'boolean':
            return propValue === 'true';
        default:
            return propValue;
    }
};
export function FEAASExternalProps(element) {
    var _a;
    const attributes = element.getAttributeNames();
    const id = element.getAttribute('data-external-id');
    const schema = (_a = FEAASExternal.registered[id]) === null || _a === void 0 ? void 0 : _a.schema;
    const props = attributes.reduce((prev, curr) => {
        if (!curr.startsWith('data-attribute') && !['class', 'id', 'contenteditable'].includes(curr)) {
            const value = element.getAttribute(curr);
            return { ...prev, [reverseKebabCase(curr)]: parseProps(reverseKebabCase(curr), value, schema === null || schema === void 0 ? void 0 : schema.properties) };
        }
        else {
            return prev;
        }
    }, {});
    return props;
}
class FEAASExternal extends FEAASBase {
    load() {
        return Promise.resolve({ React, ReactDOM });
    }
    render(props, { React }) {
        var _a;
        const { dataExternalId: id } = props;
        const Component = (_a = FEAASExternal.registered[id]) === null || _a === void 0 ? void 0 : _a.component;
        if (!Component)
            console.warn('FEAASExternal: The component you requested is not registered');
        return React.createElement(React.Fragment, null, Component && React.createElement(Component, { ...props }));
    }
    getProps() {
        return FEAASExternalProps(this);
    }
    static registerComponent(component, schema = {}) {
        const id = schema.name || component.name;
        const enrichedSchema = { ...schema, title: id, type: 'object' };
        FEAASExternal.registered[id] = { component, schema: enrichedSchema };
    }
    static setRegistrationCallback() {
        clearTimeout(FEAASExternal.registrationCallback);
        FEAASExternal.registrationCallback = setTimeout(() => {
            var _a;
            if (typeof window !== 'undefined') {
                // create components array from object
                const components = Object.keys(FEAASExternal.registered).map((id) => ({
                    ...FEAASExternal.registered[id],
                    name: id,
                    schema: convertSchemaPropertiesToKebabCase(FEAASExternal.registered[id].schema)
                    //component: FEAASExternal.registered[name].component.toString()
                }));
                // send components from iframe to parent window
                (_a = window === null || window === void 0 ? void 0 : window.parent) === null || _a === void 0 ? void 0 : _a.postMessage(JSON.stringify({
                    action: 'register-components',
                    data: components
                }), '*');
            }
        }, 30);
    }
    /*static loadComponents() {
      const components = JSON.parse(sessionStorage.getItem('feaas-external-components'))
      components.forEach((c: { name: string; schema: any; component: React.FC }) => {
        const name = c.name
        const schema = c.schema
        const component = eval('(' + c.component + ')')
        FEAASExternal.registerComponent(component, schema, name)
      })
    }*/
    static Preview(props) {
        var _a;
        const src = (props === null || props === void 0 ? void 0 : props.src) || (typeof window !== 'undefined' ? (_a = window.location.search.match(/feaasSrc=([^&]+)/)) === null || _a === void 0 ? void 0 : _a[1] : null);
        return src ? React.createElement(Component, { src: src, ...props }) : null;
    }
}
FEAASExternal.registered = {};
export default FEAASExternal;
FEAASExternal.register('feaas-external');
FEAASExternal.setRegistrationCallback();
export { FEAASExternal as External };
//# sourceMappingURL=FEAASExternal.js.map