import { beforeEach, describe, expect, it } from 'vitest'
import React from 'react'
import * as Clientside from '../src/ui/react.js'
import FEAASExternal from '../src/ui/FEAASExternal.js'

describe('External', () => {
  function Hello(props: { firstName: string; telephone: string }) {
    return React.createElement('div', {}, `Hello my name is ${props.firstName} and my tel is ${props.telephone}`)
  }
  const helloSchema = {
    name: 'MyTestComponent',
    properties: {
      firstName: {
        type: 'string'
      },
      telephone: {
        type: 'number'
      }
    }
  }
  function Hello2(props: { firstName: string; address: string }) {
    return React.createElement('div', {}, `Hello my name is ${props.firstName} and my address is ${props.address}`)
  }
  function TypesComponent(props: {
    stringProp: string
    numberProp: number
    booleanProp: boolean
    arrayProp: number[]
    objectProp: { value: string }
  }) {
    return React.createElement(
      'div',
      {},
      `Text: ${props.stringProp}, Number + 1: ${props.numberProp + 1}, Boolean: ${
        props.booleanProp === true ? 'it is true' : 'error'
      }, Array (joined): ${props.arrayProp.join(', ')}, Object: ${props.objectProp.value}`
    )
  }
  const typesComponentSchema = {
    properties: {
      stringProp: {
        type: 'string'
      },
      numberProp: {
        type: 'number'
      },
      booleanProp: {
        type: 'boolean'
      },
      arrayProp: {
        type: 'array',
        items: {
          type: 'number'
        }
      },
      objectProp: {
        type: 'object'
      }
    }
  }
  it('can register and render component', async () => {
    Clientside.External.registerComponent(Hello, helloSchema)
    document.body.innerHTML =
      '<feaas-external id="external-component" class="-component" data-attributes-keys="first-name,telephone" first-name="Chuck" telephone="45657890875643" data-attributes="{&quot;first-name&quot;:&quot;Chuck&quot;,&quot;telephone&quot;:&quot;45657890875643&quot;}" data-external-id="MyTestComponent" contenteditable="false"></feaas-external>'
    const component = document.getElementById('external-component') as FEAASExternal
    await expect(component.whenRendered).resolves.toEqual(component)
    expect(component.innerHTML).toEqual('<div>Hello my name is Chuck and my tel is 45657890875643</div>')
  })
  it('can take functional component name as id', async () => {
    Clientside.External.registerComponent(Hello)
    document.body.innerHTML =
      '<feaas-external id="external-component" class="-component" data-attributes-keys="first-name,telephone" first-name="Chuck" telephone="45657890875643" data-attributes="{&quot;first-name&quot;:&quot;Chuck&quot;,&quot;telephone&quot;:&quot;45657890875643&quot;}" data-external-id="Hello" contenteditable="false"></feaas-external>'
    const component = document.getElementById('external-component') as FEAASExternal
    await expect(component.whenRendered).resolves.toEqual(component)
    expect(component.innerHTML).toEqual('<div>Hello my name is Chuck and my tel is 45657890875643</div>')
  })
  it('should return empty if component is not registered', async () => {
    document.body.innerHTML =
      '<feaas-external id="external-component" class="-component" data-external-id="NotRegisteredComponent" contenteditable="false"></feaas-external>'
    const component = document.getElementById('external-component') as FEAASExternal
    await expect(component.whenRendered).resolves.toEqual(component)
    expect(component.innerHTML).toEqual('')
  })
  it('can register and render multiple components', async () => {
    Clientside.External.registerComponent(Hello, { name: 'MyTestComponent1' })
    Clientside.External.registerComponent(Hello2, { name: 'MyTestComponent2' })
    document.body.innerHTML =
      '<feaas-external id="external-component1" class="-component" data-attributes-keys="first-name,telephone" first-name="Chuck" telephone="45657890875643" data-attributes="{&quot;first-name&quot;:&quot;Chuck&quot;,&quot;telephone&quot;:&quot;45657890875643&quot;}" data-external-id="MyTestComponent1" contenteditable="false"></feaas-external>' +
      '<feaas-external id="external-component2" class="-component" data-attributes-keys="first-name,address" first-name="George" address="Test street 12" data-attributes="{&quot;first-name&quot;:&quot;George&quot;,&quot;address&quot;:&quot;Test street 12&quot;}" data-external-id="MyTestComponent2" contenteditable="false"></feaas-external>'
    const component1 = document.getElementById('external-component1') as FEAASExternal
    await expect(component1.whenRendered).resolves.toEqual(component1)
    expect(component1.innerHTML).toEqual('<div>Hello my name is Chuck and my tel is 45657890875643</div>')
    const component2 = document.getElementById('external-component2') as FEAASExternal
    await expect(component2.whenRendered).resolves.toEqual(component2)
    expect(component2.innerHTML).toEqual('<div>Hello my name is George and my address is Test street 12</div>')
  })
  it('can successfully parse component props', async () => {
    Clientside.External.registerComponent(TypesComponent, typesComponentSchema)
    document.body.innerHTML = `<feaas-external id="types-component" class="-component" data-attributes-keys="string-prop,number-prop,boolean-prop,array-prop,object-prop" string-prop="this is a string" number-prop="5" boolean-prop="true" array-prop="[1,2,3,4,5]" object-prop="{&quot;value&quot;:&quot;object value&quot;}" data-attributes="{&quot;first-name&quot;:&quot;Chuck&quot;,&quot;telephone&quot;:&quot;45657890875643&quot;}" data-external-id="TypesComponent" contenteditable="false"></feaas-external>`
    const typesComponent = document.getElementById('types-component') as FEAASExternal
    await expect(typesComponent.whenRendered).resolves.toEqual(typesComponent)
    expect(typesComponent.innerHTML).toEqual(
      '<div>Text: this is a string, Number + 1: 6, Boolean: it is true, Array (joined): 1, 2, 3, 4, 5, Object: object value</div>'
    )
  })
})
