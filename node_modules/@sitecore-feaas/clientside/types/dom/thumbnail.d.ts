import type { VersionModel, ComponentModel } from '@sitecore-feaas/sdk';
export type Callback = (image: HTMLImageElement, isCached: boolean) => void;
export declare const convertBase64toBlob: (base64: string) => Promise<Blob>;
/** Parse fetch response as blob and turn it into HTMLImageElement off thread */
export declare const responseToImage: (response: Response) => Promise<HTMLImageElement>;
/**
 * Retrieves the version of a given component that best fits a specific display width.
 *
 * The function ensures that the version data for the component is available and selects the one that is most suitable
 * for a display width of 800 pixels.
 *
 * @param {ComponentModel} component - The component for which the version needs to be obtained.
 * @returns {Promise<VersionModel>} - A promise that resolves to the most suitable version for a display width of 800
 *   pixels.
 */
export declare function getVersionForThumbnail(component: ComponentModel): Promise<VersionModel>;
/**
 * Ensures an up-to-date thumbnail for a specific component and version.
 *
 * This operation initiates thumbnail load and, if that fails or if file is out of date, a new thumbnail is generated.
 * It can work with a callback, which is designed to potentially fire twice for enhancing user experience. This dual
 * firing allows for an immediate display of a possibly stale cached image while downloading or generating new version
 * in the background.
 *
 * 1. The first call can happen with the stale cached or outdated image.
 * 2. The second call occurs with the up-to-date loaded or freshly generated generated image.
 *
 * @param {ComponentModel} component - Relevant component.
 * @param {VersionModel} [version] - Relevant version (optional, falls back to responsive).
 * @param {Callback} [callback] - Callback to handle the loaded or generated image (optional).
 * @returns {Promise<HTMLImageElement | null>} - The final thumbnail image (either loaded or freshly generated).
 */
export declare function get(component: ComponentModel, version?: VersionModel, callback?: Callback): Promise<HTMLImageElement>;
/**
 * Retrieves the thumbnail image for a given component/version combination, with a responsive default if version is not
 * provided.
 *
 * The resulting HTML <img> element will have `width`, `height`, and `src` properties ready for use. Although it can
 * operate as a regular promise that resolves when the thumbnail is loaded, it also supports a callback for an enhanced
 * user experience. This callback may be invoked twice, depending on the state of the cache:
 *
 * 1. The first call occurs if the image was previously cached by the browser, but the cache is stale.
 * 2. The second call happens when the image is updated from a fresh download. By this design, the user gets to see a
 *    cached image immediately while the updated image is being downloaded in the background.
 *
 * If the version of a component is known to be newer than remote file, the function will throw `InvalidResponse` error.
 * As a way to handle that error, the `generate` function may be used to produce new thumbnail (@see render).
 *
 * @param {ComponentModel} component - The component to load a thumbnail for.
 * @param {VersionModel} [version] - The version of the component to load a thumbnail for. If not provided, a version
 *   suitable for a responsive component is selected.
 * @param {Callback} [callback] - A callback to handle the loaded image. This callback may be invoked twice for the
 *   reasons described above.
 * @returns {Promise<HTMLImageElement>} - The thumbnail image for the component/version combination.
 */
export declare function load(component: ComponentModel, version?: VersionModel, callback?: Callback): Promise<HTMLImageElement>;
/**
 * Creates a thumbnail image for a given component and version.
 *
 * First, it determines the appropriate version to use. If not provided, it attempts to fetch one suitable for
 * thumbnail. It then leverages `render` to generate an image with provided parameters and finally, if the component
 * isn't new, uploads the generated as a Blob onto cdn for future retrieval.
 *
 * @param {ComponentModel} component - Component instance.
 * @param {VersionModel} [version] - Version instance.
 * @returns {Promise<HTMLImageElement | null>} Thumbnail image or null if generation isn't possible.
 */
export declare function generate(component: ComponentModel, version?: VersionModel): Promise<HTMLImageElement>;
/**
 * Uploads a thumbnail Blob to a CDN, enabling it for future retrieval.
 *
 * It constructs a URL based on component and version information, if available. The thumbnail's blob is uploaded with
 * several metadata points, including identifiers and timestamps. Upon successful upload, it sends a no-cache fetch
 * request to the constructed URL to bust the cache.
 *
 * @param {ComponentModel} component - Component instance.
 * @param {VersionModel} version - Version instance.
 * @param {Blob} blob - Blob instance to upload.
 * @returns {Promise<string>} URL of the uploaded Blob.
 */
export declare function upload(component: ComponentModel, version: VersionModel, blob: Blob): Promise<string>;
//# sourceMappingURL=thumbnail.d.ts.map