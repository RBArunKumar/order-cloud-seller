import React from 'react'
import ReactDOM from 'react-dom'
import { FEAASBase } from '../components/FEAASBase.js'
import { ReactJSX, ReactModules } from '../components/FEAASElement.js'
import { kebabCase, reverseKebabCase } from '../utils/string.js'
import { Component, FEAASComponentProps } from './react.js'

const convertSchemaPropertiesToKebabCase = (schema: any) => {
  if (!schema) return

  let kebabSchemaProperties, kebabRequiredProperties
  if (schema.properties) {
    kebabSchemaProperties = Object.keys(schema.properties).reduce((acc: { [key: string]: string }, key) => {
      acc[kebabCase(key)] = schema.properties[key]
      return acc
    }, {})

    kebabRequiredProperties = (schema.required || []).map((item: string) => kebabCase(item))
  }
  return { ...schema, properties: kebabSchemaProperties, required: kebabRequiredProperties }
}

export const parseProps = (propName: string, propValue: string, properties: any) => {
  switch (properties?.[propName]?.type) {
    case 'string':
      return propValue
    case 'object':
      return JSON.parse(propValue)
    case 'array':
      return JSON.parse(propValue)
    case 'number':
      return +propValue
    case 'integer':
      return +propValue
    case 'boolean':
      return propValue === 'true'
    default:
      return propValue
  }
}

export function FEAASExternalProps(element: FEAASBase) {
  const attributes = element.getAttributeNames()
  const id = element.getAttribute('data-external-id')
  const schema: any = FEAASExternal.registered[id]?.schema
  const props = attributes.reduce((prev, curr) => {
    if (!curr.startsWith('data-attribute') && !['class', 'id', 'contenteditable'].includes(curr)) {
      const value = element.getAttribute(curr)
      return { ...prev, [reverseKebabCase(curr)]: parseProps(reverseKebabCase(curr), value, schema?.properties) }
    } else {
      return prev
    }
  }, {})
  return props
}

export type RegisteredComponents = { [id: string]: { component: React.ElementType; schema: any } }
export type FEAASExternalProps = ReturnType<typeof FEAASExternalProps> & { dataExternalId: string }

export default class FEAASExternal extends FEAASBase<FEAASExternalProps, ReactModules> {
  static registered: RegisteredComponents = {}
  static registrationCallback: NodeJS.Timeout
  load() {
    return Promise.resolve({ React, ReactDOM })
  }

  render(props: FEAASExternalProps, { React }: ReactModules): ReactJSX {
    const { dataExternalId: id } = props
    const Component = FEAASExternal.registered[id]?.component
    if (!Component) console.warn('FEAASExternal: The component you requested is not registered')
    return <>{Component && <Component {...props} />}</>
  }

  getProps() {
    return FEAASExternalProps(this)
  }

  static registerComponent(component: React.FC, schema: any = {}) {
    const id = schema.name || component.name
    const enrichedSchema = { ...schema, title: id, type: 'object' }
    FEAASExternal.registered[id] = { component, schema: enrichedSchema }
  }

  static setRegistrationCallback() {
    clearTimeout(FEAASExternal.registrationCallback)
    FEAASExternal.registrationCallback = setTimeout(() => {
      if (typeof window !== 'undefined') {
        // create components array from object
        const components = Object.keys(FEAASExternal.registered).map((id) => ({
          ...FEAASExternal.registered[id],
          name: id,
          schema: convertSchemaPropertiesToKebabCase(FEAASExternal.registered[id].schema)
          //component: FEAASExternal.registered[name].component.toString()
        }))

        // send components from iframe to parent window
        window?.parent?.postMessage(
          JSON.stringify({
            action: 'register-components',
            data: components
          }),
          '*'
        )
      }
    }, 30)
  }

  /*static loadComponents() {
    const components = JSON.parse(sessionStorage.getItem('feaas-external-components'))
    components.forEach((c: { name: string; schema: any; component: React.FC }) => {
      const name = c.name
      const schema = c.schema
      const component = eval('(' + c.component + ')')
      FEAASExternal.registerComponent(component, schema, name)
    })
  }*/

  static Preview(props: Partial<FEAASComponentProps<any>> & { src: string }) {
    const src =
      props?.src || (typeof window !== 'undefined' ? window.location.search.match(/feaasSrc=([^&]+)/)?.[1] : null)
    return src ? <Component src={src} {...props} /> : null
  }
}

declare global {
  namespace JSX {
    interface IntrinsicElements {
      'feaas-external': {
        'data-external-id': string
        children?: any
        dangerouslySetInnerHTML?: { __html: string }
        [key: string]: any
      }
    }
  }
}

FEAASExternal.register('feaas-external')
FEAASExternal.setRegistrationCallback()

export { FEAASExternal as External }
